#!/usr/bin/env node

/**
 * Teste Completo - Google Sheets Configuration
 * Verifica: planilha, credenciais, API, permiss√µes
 */

const fs = require('fs');
const path = require('path');
const { google } = require('googleapis');

// Cores para output
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logSection(title) {
  console.log(`\n${colors.bold}${colors.blue}=== ${title} ===${colors.reset}`);
}

async function testComplete() {
  logSection('üß™ TESTE COMPLETO - GOOGLE SHEETS');
  
  // 1. Verificar arquivos de configura√ß√£o
  logSection('1. üìÅ Verificando arquivos de configura√ß√£o');
  
  const files = {
    '.env': fs.existsSync('.env'),
    'google-credentials.json': fs.existsSync('google-credentials.json'),
    'env.example': fs.existsSync('env.example')
  };
  
  Object.entries(files).forEach(([file, exists]) => {
    log(`${exists ? '‚úÖ' : '‚ùå'} ${file}`, exists ? 'green' : 'red');
  });
  
  // 2. Verificar credenciais
  logSection('2. üîë Verificando credenciais da Service Account');
  
  try {
    const credentials = JSON.parse(fs.readFileSync('google-credentials.json', 'utf8'));
    
    const requiredFields = [
      'type',
      'project_id', 
      'private_key_id',
      'private_key',
      'client_email',
      'client_id'
    ];
    
    requiredFields.forEach(field => {
      const hasField = credentials[field] && credentials[field].length > 0;
      log(`${hasField ? '‚úÖ' : '‚ùå'} ${field}`, hasField ? 'green' : 'red');
    });
    
    // Verificar formato da chave privada
    const privateKey = credentials.private_key;
    const hasCorrectFormat = privateKey && 
      privateKey.includes('-----BEGIN PRIVATE KEY-----') &&
      privateKey.includes('-----END PRIVATE KEY-----');
    
    log(`${hasCorrectFormat ? '‚úÖ' : '‚ùå'} Formato da chave privada`, hasCorrectFormat ? 'green' : 'red');
    
    if (hasCorrectFormat) {
      log(`   üìß Email: ${credentials.client_email}`, 'blue');
      log(`   üÜî Project ID: ${credentials.project_id}`, 'blue');
    }
    
  } catch (error) {
    log(`‚ùå Erro ao ler credenciais: ${error.message}`, 'red');
  }
  
  // 3. Testar conex√£o com Google Sheets
  logSection('3. üîó Testando conex√£o com Google Sheets');
  
  try {
    // Carregar credenciais
    const credentials = JSON.parse(fs.readFileSync('google-credentials.json', 'utf8'));
    
    // Configurar autentica√ß√£o
    const auth = new google.auth.GoogleAuth({
      credentials: credentials,
      scopes: ['https://www.googleapis.com/auth/spreadsheets'],
    });
    
    const sheets = google.sheets({ version: 'v4', auth });
    
    // Tentar listar planilhas (teste b√°sico de API)
    log('üîÑ Testando acesso √† API...', 'yellow');
    
    // Primeiro, vamos tentar acessar a API sem ID espec√≠fico
    const authClient = await auth.getClient();
    log('‚úÖ Autentica√ß√£o com Google API bem-sucedida', 'green');
    
    // Verificar se temos um ID de planilha para testar
    let spreadsheetId = null;
    
    // Tentar ler do .env se existir
    if (fs.existsSync('.env')) {
      const envContent = fs.readFileSync('.env', 'utf8');
      const sheetsIdMatch = envContent.match(/GOOGLE_SHEETS_ID=([^\s]+)/);
      if (sheetsIdMatch) {
        spreadsheetId = sheetsIdMatch[1];
        log(`üìã ID da planilha encontrado: ${spreadsheetId}`, 'blue');
      }
    }
    
    if (spreadsheetId) {
      log('üîÑ Testando acesso √† planilha espec√≠fica...', 'yellow');
      
      try {
        const response = await sheets.spreadsheets.get({
          spreadsheetId: spreadsheetId,
        });
        
        log('‚úÖ Planilha encontrada e acess√≠vel!', 'green');
        log(`   üìä T√≠tulo: ${response.data.properties.title}`, 'blue');
        log(`   üìã Abas: ${response.data.sheets.map(s => s.properties.title).join(', ')}`, 'blue');
        
        // Verificar permiss√µes
        log('üîÑ Verificando permiss√µes...', 'yellow');
        
        try {
          // Tentar ler uma c√©lula para verificar permiss√µes de leitura
          await sheets.spreadsheets.values.get({
            spreadsheetId: spreadsheetId,
            range: 'A1:A1',
          });
          log('‚úÖ Permiss√£o de leitura: OK', 'green');
        } catch (readError) {
          log('‚ùå Erro na permiss√£o de leitura', 'red');
          log(`   ${readError.message}`, 'red');
        }
        
        try {
          // Tentar escrever uma c√©lula de teste para verificar permiss√µes de escrita
          await sheets.spreadsheets.values.update({
            spreadsheetId: spreadsheetId,
            range: 'Z999:Z999', // C√©lula bem longe
            valueInputOption: 'RAW',
            resource: { values: [['TESTE_PERMISSAO']] },
          });
          log('‚úÖ Permiss√£o de escrita: OK', 'green');
          
          // Limpar o teste
          await sheets.spreadsheets.values.clear({
            spreadsheetId: spreadsheetId,
            range: 'Z999:Z999',
          });
          
        } catch (writeError) {
          log('‚ùå Erro na permiss√£o de escrita', 'red');
          log(`   ${writeError.message}`, 'red');
        }
        
      } catch (sheetsError) {
        log('‚ùå Erro ao acessar planilha espec√≠fica', 'red');
        log(`   ${sheetsError.message}`, 'red');
        
        if (sheetsError.message.includes('notFound')) {
          log('üí° Dica: Verifique se o ID da planilha est√° correto', 'yellow');
        } else if (sheetsError.message.includes('forbidden')) {
          log('üí° Dica: Verifique se a planilha est√° compartilhada com a Service Account', 'yellow');
        }
      }
    } else {
      log('‚ö†Ô∏è  Nenhum ID de planilha encontrado para teste espec√≠fico', 'yellow');
      log('üí° Configure GOOGLE_SHEETS_ID no arquivo .env', 'yellow');
    }
    
  } catch (error) {
    log('‚ùå Erro na conex√£o com Google Sheets', 'red');
    log(`   ${error.message}`, 'red');
    
    if (error.message.includes('invalid_grant')) {
      log('üí° Dica: Verifique se a Google Sheets API est√° ativada', 'yellow');
    } else if (error.message.includes('unauthorized')) {
      log('üí° Dica: Verifique as credenciais da Service Account', 'yellow');
    }
  }
  
  // 4. Resumo final
  logSection('4. üìã RESUMO DOS TESTES');
  
  log('üéØ Para corrigir problemas:', 'bold');
  log('1. Verifique se a Google Sheets API est√° ativada no Google Cloud Console', 'blue');
  log('2. Confirme se a planilha est√° compartilhada com a Service Account', 'blue');
  log('3. Verifique se o ID da planilha est√° correto', 'blue');
  log('4. Confirme se as credenciais est√£o atualizadas', 'blue');
  
  log('\nüîó Links √∫teis:', 'bold');
  log('‚Ä¢ Google Cloud Console: https://console.cloud.google.com/', 'blue');
  log('‚Ä¢ Google Sheets API: https://console.cloud.google.com/apis/library/sheets.googleapis.com', 'blue');
  log('‚Ä¢ Service Accounts: https://console.cloud.google.com/iam-admin/serviceaccounts', 'blue');
  
  log('\n‚úÖ Teste completo finalizado!', 'green');
}

// Executar teste
testComplete().catch(console.error); 